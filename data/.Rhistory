rm(list = ls())
library(quanteda)
library(stylest)
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
source("../R/stylest2_fit.R")
## fit stylest2
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
test.stylest2 <- stylest2_fit(novels_excerpts_dfm)
test.stylest2 <- stylest2_fit(dfm=novels_excerpts_dfm)
class(novels_excerpts_dfm)
inherits(novels_excerpts_dfm, "dfm")
source("../R/stylest2_fit.R")
## fit stylest2
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
test.stylest2 <- stylest2_fit(dfm=novels_excerpts_dfm)
## fit stylest
test.stylest <- stylest_fit(x = novels_excerpts$text,
speaker = novels_excerpts$author,
smooth = 0.5,
terms = NULL,
term_weights = NULL)
test.stylest2$rate[ , colnames(test.stylest2$rate) == "the"]
test.stylest$rate[ , colnames(test.stylest$rate) == "the"]
test.stylest2$rate[ , colnames(test.stylest2$rate) == "little"]
test.stylest$rate[ , colnames(test.stylest$rate) == "little"]
test.stylest2$tokens_per_term
test.stylest2$tokens_per_term["little"]
test.stylest$ntoken
test.stylest$rate
View(test.stylest)
## fit stylest2
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
model_stylest2 <- stylest2_fit(dfm=novels_excerpts_dfm)
## fit stylest
model_stylest <- stylest_fit(x = novels_excerpts$text,
speaker = novels_excerpts$author,
smooth = 0.5,
terms = NULL,
term_weights = NULL)
## check the rates from fit() function
model_stylest2$rate[ , colnames(model_stylest2$rate) == "the"]
model_stylest$rate[ , colnames(model_stylest$rate) == "the"]
model_stylest2$rate[ , colnames(model_stylest2$rate) == "little"]
model_stylest$rate[ , colnames(model_stylest$rate) == "little"]
source("../R/stylest2_predict.R")
model_stylest2_predict <- stylest2_predict(dfm=novels_excerpts_dfm, model = model_stylest2,
speaker_odds = T, term_influence = T)
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
### stylest2_fit ###
source("../R/stylest2_fit.R")
## fit stylest
MOD1 <- stylest_fit(x = novels_excerpts$text,
speaker = novels_excerpts$author,
smooth = 0.5,
terms = NULL,
term_weights = NULL)
## fit stylest2
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
MOD2 <- stylest2_fit(dfm=novels_excerpts_dfm)
## check the rates from fit() function
MOD1$rate[ , colnames(MOD1$rate) == "the"]
MOD2$rate[ , colnames(MOD2$rate) == "the"]
MOD1$rate[ , colnames(MOD1$rate) == "little"]
MOD2$rate[ , colnames(MOD2$rate) == "little"]
## check the predicted probabilites from predict() function
MOD1PRED <- stylest_predict(model = MOD1, text = novels_excerpts$text)
MOD2PRED <- stylest2_predict(dfm=novels_excerpts_dfm, model = MOD2,
speaker_odds = T, term_influence = T)
source("../R/stylest2_predict.R")
## check the predicted probabilites from predict() function
MOD1PRED <- stylest_predict(model = MOD1, text = novels_excerpts$text)
MOD2PRED <- stylest2_predict(dfm=novels_excerpts_dfm, model = MOD2,
speaker_odds = T, term_influence = T)
all.equal(as.character(MOD1PRED$predicted), as.character(MOD2PRED$posterior$predicted))
MOD1PRED$log_probs
MOD2PRED$log_probs
MOD2PRED$speaker_odds
MOD2PRED$posterior$log_probs
MOD1PRED$log_probs
MOD1PRED$log_probs
MOD2PRED$posterior$log_probs
as.matrix(MOD1PRED$log_probs)
as.matrix(MOD2PRED$posterior$log_probs)
unname(as.matrix(MOD2PRED$posterior$log_probs))
unname(as.matrix(MOD1PRED$log_probs))
all.equal( unname(as.matrix(MOD1PRED$log_probs)), unname(as.matrix(MOD2PRED$posterior$log_probs)) )
MOD2PRED$speaker_odds$log_odds_mean
help(stylest_odds)
MOD1ODDS <- stylest_odds(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
MOD1ODDS <- stylest_odds(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
MOD1ODDS$log_odds_avg
all.equal(MOD1ODDS$log_odds_avg, unname(MOD2PRED$speaker_odds$log_odds_mean))
all.equal(MOD1ODDS$log_odds_se, unname(MOD2PRED$speaker_odds$log_odds_se))
MOD1INF <- stylest_term_influence(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
MOD1INF <- stylest_term_influence(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
MOD2PRED$term_influence
all.equal(MOD1INF$infl_avg, MOD2PRED$term_influence[ , "mean_influence"])
MOD2PRED$term_influence[ , "mean_influence"]
MOD2PRED$term_influence
all.equal(MOD1INF$infl_avg, MOD2PRED$term_influence[[1]][ , "mean_influence"])
MOD2PRED$term_influence[[1]][ , "mean_influence"]
MOD2PRED$term_influence[[1]]
MOD2PRED$term_influence[[1]]$mean_influence
MOD1INF$infl_avg
all.equal(MOD1INF$infl_avg, MOD2PRED$term_influence[[1]]$mean_influence)
MOD1INF$infl_avg
MOD1INF
all.equal(MOD1INF$infl_avg[order(MOD1INF$term)], MOD2PRED$term_influence[[1]]$mean_influence[order(MOD2PRED$term_influence[[1]]$features)])
all.equal(MOD1INF$infl_max[order(MOD1INF$term)], MOD2PRED$term_influence[[1]]$max_influence[order(MOD2PRED$term_influence[[1]]$features)])
## average log odds
all.equal(MOD1ODDS$log_odds_avg, unname(MOD2PRED$speaker_odds$log_odds_mean))
## standard error of log odds
all.equal(MOD1ODDS$log_odds_se, unname(MOD2PRED$speaker_odds$log_odds_se))
source("../R/stylest2_select_vocab.R")
set.seed(123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
load("sotu_speeches.RData")
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
### stylest_fit ###
## fit stylest
MOD1 <- stylest_fit(x = novels_excerpts$text,
speaker = novels_excerpts$author,
smooth = 0.5,
terms = NULL,
term_weights = NULL)
## fit stylest2
MOD2 <- stylest2_fit(dfm=novels_excerpts_dfm)
## TEST 1: check the rates from fit() function are equal
MOD1$rate[ , colnames(MOD1$rate) == "the"]
MOD2$rate[ , colnames(MOD2$rate) == "the"]
MOD1$rate[ , colnames(MOD1$rate) == "little"]
MOD2$rate[ , colnames(MOD2$rate) == "little"]
## equivalent
### stylest_predict ###
## check the predicted probabilites from predict() function
MOD1PRED <- stylest_predict(model = MOD1, text = novels_excerpts$text)
MOD2PRED <- stylest2_predict(dfm=novels_excerpts_dfm, model = MOD2,
speaker_odds = T, term_influence = T)
## predicted author of the text
all.equal(as.character(MOD1PRED$predicted), as.character(MOD2PRED$posterior$predicted))
## log probability of predicted authorship
all.equal( unname(as.matrix(MOD1PRED$log_probs)), unname(as.matrix(MOD2PRED$posterior$log_probs)) )
## equivalent
### stylest_odds ###
MOD1ODDS <- stylest_odds(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
## average log odds
all.equal(MOD1ODDS$log_odds_avg, unname(MOD2PRED$speaker_odds$log_odds_mean))
## standard error of log odds
all.equal(MOD1ODDS$log_odds_se, unname(MOD2PRED$speaker_odds$log_odds_se))
## equivalent
### stylest_term_influence ###
MOD1INF <- stylest_term_influence(model = MOD1, text = novels_excerpts$text, speaker = novels_excerpts$author)
## mean influence
all.equal(MOD1INF$infl_avg[order(MOD1INF$term)], MOD2PRED$term_influence[[1]]$mean_influence[order(MOD2PRED$term_influence[[1]]$features)])
## max influence
all.equal(MOD1INF$infl_max[order(MOD1INF$term)], MOD2PRED$term_influence[[1]]$max_influence[order(MOD2PRED$term_influence[[1]]$features)])
## equivalent
################################################################################
## test functions with novels excerpts data
load("sotu_speeches.RData")
## pre processing for stylest2
sotu_speeches$text <- gsub("--|- | -|—", " - ", sotu_speeches$sotu_text)
sotu_speeches_tok <- tokens(sotu_speeches$text)
docvars(sotu_speeches_tok)["author"] <- sotu_speeches$president
sotu_speeches_dfm <- dfm(sotu_speeches_tok)
set.seed(123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv$cv_missrate_results
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv$cv_missrate_results
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
x=novels_excerpts$text
speaker = novels_excerpts$author
dfm=novels_excerpts_dfm
x <- corpus::as_corpus_text(x, filter)
filter = NULL
x <- corpus::as_corpus_text(x, filter)
speaker <- as.factor(speaker)
ntot <- length(x)
set.seed(123)
test_fold <- sample(rep(1:nfold, ceiling(ntot / nfold)), ntot)
nfold = 5
test_fold <- sample(rep(1:nfold, ceiling(ntot / nfold)), ntot)
test_fold
ndoc <- nrow(dfm)
seed
set.seed(123)
random_order <- sample(1:ndoc)
random_order
ndoc
dfm <- dfm[random_order , ]
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
dfm=novels_excerpts_dfm
if(!inherits(dfm, 'dfm')) {
stop('`dfm` object must be of class "dfm".')
}
if(smoothing<0 | !is.numeric(smoothing)) {
stop('Smoothing value must be numeric and non-negative.')
}
cutoffs=c(50, 60, 70, 80, 90, 99)
smoothing=0.5
nfold=5
seed=NULL
if(smoothing<0 | !is.numeric(smoothing)) {
stop('Smoothing value must be numeric and non-negative.')
}
## extract authors from input data
if( !'author' %in% names(quanteda::docvars(dfm)) ) {
stop('Need to supply a docvar in `dfm` with text authorship with name "author".')
} else {
author_loc <- as.character(quanteda::docvars(dfm)['author'][,1])
}
if(length(author_loc) < 2) {
stop('Should be at least two authors in the corpus.')
}
if(any(is.na(author_loc))) {
stop('Detected missingness in the authorship variable. Documents with missing authorship should be omitted from the corpus.')
}
## if there are any docvars that dont contain "author"
if( any(colnames(quanteda::docvars(dfm)) != 'author') ) {
warning('Additional docvars detected other than authorship. These will be ignored.')
}
## reorder documents prior distributing folds
ndoc <- nrow(dfm)
if(!is.null(seed)) {set.seed(seed)}
random_order <- sample(1:ndoc)
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
if(Sys.info()["user"]=="christianbaehr") {setwd("/Users/christianbaehr/Documents/GitHub/stylest2_project/stylest2_project/data")}
rm(list = ls())
library(quanteda)
library(stylest)
source("../R/stylest2_select_vocab.R")
source("../R/stylest2_fit.R")
source("../R/stylest2_predict.R")
################################################################################
## test functions with novels excerpts data
load("novels_excerpts.RData")
## pre processing for stylest2
novels_excerpts$text <- gsub("--|- | -|—", " - ", novels_excerpts$text)
novels_excerpts_tok <- tokens(novels_excerpts$text)
docvars(novels_excerpts_tok)["author"] <- novels_excerpts$author
novels_excerpts_dfm <- dfm(novels_excerpts_tok)
### stylest_select_vocab ###
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
set.seed(123)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(123)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
set.seed(345)
#test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm, seed=123)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(345)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
num <- round(runif(100))
num <- round(runif(max=100))
num <- round(n=1, runif(max=100))
num <- sample(1:1000)
num <- sample(1:1000, 1)
num <- sample(1:1000, 1)
set.seed(num)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(num)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
num <- sample(1:1000, 1)
set.seed(num)
test.stylest2.cv <- stylest2_select_vocab(dfm=novels_excerpts_dfm)
test.stylest2.cv$cv_missrate_results
set.seed(num)
test.stylest.cv <- stylest_select_vocab(x=novels_excerpts$text, speaker = novels_excerpts$author)
test.stylest.cv$miss_pct
## test functions with SOTU speeches data
load("sotu_speeches.RData")
## pre processing for stylest2
sotu_speeches$text <- gsub("--|- | -|—", " - ", sotu_speeches$sotu_text)
sotu_speeches_tok <- tokens(sotu_speeches$text)
docvars(sotu_speeches_tok)["author"] <- sotu_speeches$president
sotu_speeches_dfm <- dfm(sotu_speeches_tok)
sotu_speeches_tok$text
MOD1CV <- stylest_select_vocab(x=sotu_speeches$text, speaker = sotu_speeches$president)
MOD1CV$miss_pct
num <- sample(1:1000, 1)
set.seed(num)
MOD1CV <- stylest_select_vocab(x=sotu_speeches$text, speaker = sotu_speeches$president)
MOD1CV$miss_pct
set.seed(num)
MOD2CV <- stylest2_select_vocab(dfm=sotu_speeches_dfm)
MOD2CV$cv_missrate_results
all.equal(MOD1CV$miss_pct, MOD2CV$cv_missrate_results)
## fit stylest
MOD1 <- stylest_fit(x = sotu_speeches$text,
speaker = sotu_speeches$president,
smooth = 0.5,
terms = NULL,
term_weights = NULL)
## fit stylest2
MOD2 <- stylest2_fit(dfm=sotu_speeches_dfm)
## TEST 1: check the rates from fit() function are equal
MOD1$rate[ , colnames(MOD1$rate) == "the"]
MOD2$rate[ , colnames(MOD2$rate) == "the"]
MOD1$rate[ , colnames(MOD1$rate) == "little"]
MOD2$rate[ , colnames(MOD2$rate) == "little"]
## check the predicted probabilites from predict() function
MOD1PRED <- stylest_predict(model = MOD1, text = sotu_speeches$text)
MOD2PRED <- stylest2_predict(dfm=sotu_speeches_dfm, model = MOD2,
speaker_odds = T, term_influence = T)
## predicted author of the text
all.equal(as.character(MOD1PRED$predicted), as.character(MOD2PRED$posterior$predicted))
## log probability of predicted authorship
all.equal( unname(as.matrix(MOD1PRED$log_probs)), unname(as.matrix(MOD2PRED$posterior$log_probs)) )
## equivalent
